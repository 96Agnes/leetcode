class Solution {
    public String longestPalindrome(String s) {
        if(s.equals(""))
            return "";
        String orign = s;
        String reverse = new StringBuffer(s).reverse().toString();
        int len = s.length();
        int[][] arr = new int[len][len];
        int maxlen = 0;
        int max_i_index = 0, max_j_index = 0;
        
        for(int i = 0; i < len; i++)
            for(int j = 0; j < len; j++)
            {
                if(orign.charAt(i) == reverse.charAt(j))
                {
                    if(i == 0 || j == 0)
                    {
                        arr[i][j] = 1;
                    }
                    else
                    {
                        arr[i][j] = arr[i-1][j-1] + 1;
                    }
                    
                    if(arr[i][j] > maxlen)
                    {
                        int beforeindex = j + 1 - arr[i][j];
                        if((len - 1 - beforeindex) == i)
                        {
                            maxlen = arr[i][j];
                            max_i_index = i;
                        }
                    }
                }
                else
                    arr[i][j] = 0;                
            }
        return s.substring(max_i_index + 1 - maxlen, max_i_index+1);
        
    }
}

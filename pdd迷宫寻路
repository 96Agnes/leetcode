假设一个探险家被困在了地底的迷宫之中，要从当前位置开始找到一条通往迷宫出口的路径。迷宫可以用一个二维矩阵组成，有的部分是墙，有的部分是路。迷宫之中有的路上还有门，每扇门都在迷宫的某个地方有与之匹配的钥匙，只有先拿到钥匙才能打开门。请设计一个算法，帮助探险家找到脱困的最短路径。如前所述，迷宫是通过一个二维矩阵表示的，每个元素的值的含义如下 0-墙，1-路，2-探险家的起始位置，3-迷宫的出口，大写字母-门，小写字母-对应大写字母所代表的门的钥匙

输入描述:
迷宫的地图，用二维矩阵表示。第一行是表示矩阵的行数和列数M和N
后面的M行是矩阵的数据，每一行对应与矩阵的一行（中间没有空格）。M和N都不超过100, 门不超过10扇。

输出描述:
路径的长度，是一个整数

输入例子1:
5 5
02111
01a0A
01003
01001
01111

输出例子1:
7


import java.util.*;

public class Main {
    static class Node{
        int x;
        int y;
        int key;
        int step;
        public Node(int x, int y, int key, int step){
            this.x = x;
            this.y = y;
            this.key = key;
            this.step = step;
        }
    }

    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int M =sc.nextInt();//矩阵行数
        int N =sc.nextInt();//矩阵列数
        sc.nextLine();
        char[][] G = new char[M][N];//迷宫地图
        for(int i = 0; i < M; i++){
            G[i] = sc.nextLine().toCharArray();
        }

        for(int i = 0;i < M; i++)
            for(int j = 0;j < N; j++){
                if(G[i][j] == '2'){
                    System.out.println(bfs(i,j,M,N,G));
                }
            }
    }

    public static int bfs(int si,int sj,int M,int N,char[][] G){
        Queue<Node> queue = new LinkedList<>();
        int[][] next = {{-1,0},{0,-1},{1,0},{0,1}};//左上右下
        int[][][] visit = new int[100][100][1024];//该点是否走过
        queue.offer(new Node(si,sj,0,0));
        while (!queue.isEmpty()){
            Node node = queue.poll();
            for(int i = 0;i < 4;i++){
                int x = node.x + next[i][0];
                int y = node.y + next[i][1];
                int key = node.key;//最多10把钥匙，key取值范围为0-1023
                if(x<0 || x>=M || y<0 || y>=N || G[x][y] == '0') continue;
                if(G[x][y] == '3')//找到出口
                    return node.step + 1;
                else if(G[x][y] <='z' && G[x][y] >= 'a')//找到钥匙
                    key = key | (1<< (G[x][y] - 'a'));
                else if(G[x][y] <='Z' && G[x][y] >= 'A' && (key & (1 << (G[x][y] - 'A'))) == 0){//遇到门，打不开
                        continue;
                }
                if(visit[x][y][key] == 0){
                    visit[x][y][key] = 1;
                    queue.offer(new Node(x,y,key,node.step+1));
                }
            }
        }
        return -1;
    }
}

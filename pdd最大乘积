给定一个无序数组，包含正数、负数和0，要求从中找出3个数的乘积，使得乘积最大，要求时间复杂度：O(n)，空间复杂度：O(1)

输入描述:
输入共2行，第一行包括一个整数n，表示数组长度
第二行为n个以空格隔开的整数，分别为A1,A2, … ,An

输出描述:
满足条件的最大乘积

输入例子1:
4
3 4 1 2

输出例子1:
24


import java.lang.reflect.Array;
import java.util.*;

public class Main {
    public static void main(String args[]) {
        int PositiveIndex = -1;
        int NegativeIndex = -1;
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        long[] num = new long[n];
        for(int i = 0; i < n; i++){
            long temp = sc.nextLong();
            num[i] = temp;
        }
        long max1=0,max2=0,max3=0, min1=0,min2=0;
        for(int i = 0;i < num.length; i++){
            if(num[i] > max1) {
                max3 = max2;
                max2 = max1;
                max1 = num[i];
            }
            else if(num[i] > max2){
                max3 = max2;
                max2 = num[i];
            }
            else if(num[i] > max3){
                max3 = num[i];
            }
            else if(num[i] < min1){
                min2=min1;
                min1=num[i];
            }
            else if(num[i] < min2){
                min2=num[i];
            }
        }
        System.out.println(Math.max(max1*max2*max3,max1*min1*min2));
    }
}
